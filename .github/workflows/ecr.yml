name: Build & Push to ECR
on:
  push:
    branches: [ main ]   # protected branch per assignment

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write    # if using OIDC instead of static keys

    steps:
      - name: Check out
        uses: actions/checkout@v4

      # Either configure with static creds...
      - name: Configure AWS credentials
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token:     ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region:            ${{ vars.AWS_REGION || 'us-east-1' }}

      # ...or use OIDC role in your AWS account

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & push web image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: clo835-webapp
          IMAGE_TAG: v0.1
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG -f Dockerfile .
          docker push  $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG

      - name: Build & push mysql image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: clo835-mysql
          IMAGE_TAG: v0.1
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG -f Dockerfile.mysql .
          docker push  $ECR_REGISTRY/$ECR_REPO:$IMAGE_TAG
